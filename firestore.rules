rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    // Products can be read by anyone, but only created/updated/deleted by admins
    match /products/{productId} {
      allow read: if true;
      allow write: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // User documents
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      // Only the user themselves can update their profile
      allow update: if isSignedIn() && request.auth.uid == userId;
      // Anyone can create a user document (sign up)
      allow create: if true;
    }
    
    // Notifications sub-collection rules
    // Allow any authenticated user to create a notification for another user
    // Only allow the user to read or delete their own notifications
    match /users/{userId}/notifications/{notificationId} {
      allow create: if isSignedIn();
      allow read, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Statuses can be created by any signed-in user.
    // They can be read by anyone.
    // They can only be deleted by the user who created them.
    match /statuses/{statusId} {
        allow read, write: if isSignedIn();
    }
    
    // Subcollections for status likes and views
    match /statuses/{statusId}/{collection}/{docId} {
      allow read, write: if isSignedIn();
    }

    // Chats collection
    // Users can only read/write messages in a chat if they are one of the two participants.
    // The chat ID is always structured as "uid1_uid2" with UIDs sorted alphabetically.
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if isSignedIn() && (request.auth.uid in chatId.split('_'));
    }
    
    // Groups collection
    // Users can read/write to a group if their UID is in the 'members' array.
    match /groups/{groupId} {
        allow read, update, delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
        allow read: if isSignedIn() && request.auth.uid in resource.data.members;
        allow create: if isSignedIn();
    }
    
    match /groups/{groupId}/messages/{messageId} {
       allow read, write: if isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
    }
  }
}