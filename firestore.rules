
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow reading public user data and updating one's own data
    match /users/{userId} {
      allow read: if resource.data.isPrivate == false || request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;

      // Rules for notifications sub-collection
      match /notifications/{notificationId} {
        // Any authenticated user can create a notification for another user
        allow create: if request.auth != null;
        // Only the owner of the notifications can read or delete them
        allow read, delete: if request.auth.uid == userId;
      }
    }

    // Products can be read by anyone, but only modified by admins (or a specific role)
    // Assuming admin logic is handled server-side or via custom claims
    match /products/{productId} {
      allow read: if true;
      // Write access should be restricted, for now allowing any authenticated user
      allow write: if request.auth != null;
    }

    // Chats can only be accessed by participants
    // This rule is a basic example. It assumes the chat document ID is a combination of UIDs.
    match /chats/{chatId}/{document=**} {
       allow read, write: if request.auth.uid in chatId.split('_');
    }
    
    // Groups can be read by members, and written to by members.
    // More granular control (e.g., only admin can update settings) should be in backend logic.
    match /groups/{groupId} {
      allow read: if request.auth.uid in resource.data.members;
      allow update: if request.auth.uid in resource.data.members;
    }
    
    // Group messages can be read/written by group members.
    match /groups/{groupId}/messages/{messageId} {
        allow read, write: if get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
    }

    // Statuses can be read by anyone (as they are filtered for public users in the app)
    // and created by any authenticated user.
    match /statuses/{statusId} {
      allow read: if true;
      allow create, update: if request.auth.uid == resource.data.userId;
      
       // Likes and views can be created by any authenticated user
       match /likes/{likeId} {
        allow read, create: if request.auth != null;
      }
      match /views/{viewId} {
        allow read, create: if request.auth != null;
      }
    }
  }
}
